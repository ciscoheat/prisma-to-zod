// Auto-generated by prisma-to-zod

// <P2Z> This will be replaced by generated code
import { z } from 'zod';
import type { ZodRawShape } from 'zod';
import type { Continent, Country, Brand, Model, User } from '@prisma/client';
// </P2Z>

// This code is safe to edit and modify

export const intId = z.number().positive();

const continent = {
  id: z.string(),
  name: z.string(),
  slug: z.string().regex(/^[a-z0-9][a-z0-9-]+$/)
};

const country = {
  id: z.string(),
  name: z.string(),
  slug: z.string().regex(/^[a-z0-9][a-z0-9-]+$/),
  continentId: z.string().nullable()
};

const brand = {
  id: intId,
  name: z.string(),
  slug: z.string().regex(/^[a-z0-9][a-z0-9-]+$/),
  founded: z.number().nullable(),
  alias: z.string().nullable(),
  countryId: z.string()
};

const model = {
  id: intId,
  slug: z.string().regex(/^[a-z0-9][a-z0-9-]+$/),
  name: z.string(),
  brandId: intId
};

const user = {
  id: intId,
  email: z.string().email().nullable(),
  name: z.string().nullable(),
  address: z.string().nullable(),
  createdAt: z.date()
};

// <P2Z> This will be replaced by generated code
type ExactKeys<Shape, T> = keyof Shape extends keyof T
  ? keyof T extends keyof Shape
    ? T
    : never
  : Omit<Shape, keyof T>;

function schema<Shape, Other extends ZodRawShape>(obj: ExactKeys<Shape, Other>) {
  return z.object(obj as ZodRawShape);
}

export const continentSchema = schema<Continent, typeof continent>(continent);
export const countrySchema = schema<Country, typeof country>(country);
export const brandSchema = schema<Brand, typeof brand>(brand);
export const modelSchema = schema<Model, typeof model>(model);
export const userSchema = schema<User, typeof user>(user);
// </P2Z>