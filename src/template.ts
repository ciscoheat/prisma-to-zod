export const template = (
  identifier: string,
  types: [string, Record<string, string>][],
  exportConsts: Record<string, string>
) =>
  `
// Auto-generated by prisma-to-zod

// <P2Z> This will be replaced by generated code
import { ${identifier} } from 'zod';
import type { ZodRawShape } from 'zod';
import type { ${types.map(([name]) => name).join(", ")} } from '@prisma/client';
// </P2Z>

// This code is safe to edit and modify

${Object.entries(exportConsts)
  .map(([name, code]) => `export const ${name} = ${code};`)
  .join("\n")}

${types.map(([name, object]) => schema(name, object)).join("\n\n")}

// <P2Z> This will be replaced by generated code
type ExactKeys<Shape, T> = keyof Shape extends keyof T
  ? keyof T extends keyof Shape
    ? T
    : never
  : Omit<Shape, keyof T>;

function schema<Shape, Other extends ZodRawShape>(obj: ExactKeys<Shape, Other>) {
  return ${identifier}.object(obj as Other);
}

${types.map(([name]) => exportSchema(name)).join("\n")}
// </P2Z>
`.trim();

/////////////////////////////////////////////////////////////////////

const schema = (type: string, object: Record<string, string>) => {
  const schemaVar = type.charAt(0).toLowerCase() + type.slice(1);
  return `
const ${schemaVar} = {
  ${Object.entries(object)
    .map(([key, value]) => `${key}: ${value}`)
    .join(",\n  ")}
};`.trim();
};

const exportSchema = (type: string) => {
  const schemaVar = type.charAt(0).toLowerCase() + type.slice(1);
  const schema = `${schemaVar}Schema`;
  return `export const ${schema} = schema<${type}, typeof ${schemaVar}>(${schemaVar});`.trim();
};
